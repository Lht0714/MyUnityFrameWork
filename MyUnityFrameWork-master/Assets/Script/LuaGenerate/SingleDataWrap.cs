//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class SingleDataWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(SingleData), typeof(System.Collections.Generic.Dictionary<string,string>));
		L.RegFunction("GetInt", GetInt);
		L.RegFunction("GetIntArray", GetIntArray);
		L.RegFunction("GetFloat", GetFloat);
		L.RegFunction("GetFloatArray", GetFloatArray);
		L.RegFunction("GetBool", GetBool);
		L.RegFunction("GetBoolArray", GetBoolArray);
		L.RegFunction("GetString", GetString);
		L.RegFunction("GetVector2", GetVector2);
		L.RegFunction("GetVector2Array", GetVector2Array);
		L.RegFunction("GetVector3Array", GetVector3Array);
		L.RegFunction("GetVector3", GetVector3);
		L.RegFunction("GetColor", GetColor);
		L.RegFunction("GetStringArray", GetStringArray);
		L.RegFunction("GetArray", GetArray);
		L.RegFunction("New", _CreateSingleData);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("data", get_data, set_data);
		L.RegVar("m_SingleDataKey", get_m_SingleDataKey, set_m_SingleDataKey);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateSingleData(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				SingleData obj = new SingleData();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: SingleData.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInt(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			int o = obj.GetInt(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIntArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			int[] o = obj.GetIntArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			float o = obj.GetFloat(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloatArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			float[] o = obj.GetFloatArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBool(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.GetBool(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBoolArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			bool[] o = obj.GetBoolArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			string o = obj.GetString(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVector2(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Vector2 o = obj.GetVector2(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVector2Array(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Vector2[] o = obj.GetVector2Array(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVector3Array(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Vector3[] o = obj.GetVector3Array(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVector3(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Vector3 o = obj.GetVector3(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Color o = obj.GetColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetStringArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			string[] o = obj.GetStringArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetArray(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			SingleData obj = (SingleData)ToLua.CheckObject(L, 1, typeof(SingleData));
			string arg0 = ToLua.CheckString(L, 2);
			System.Array o = obj.GetArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SingleData obj = (SingleData)o;
			DataTable ret = obj.data;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index data on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_SingleDataKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SingleData obj = (SingleData)o;
			string ret = obj.m_SingleDataKey;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_SingleDataKey on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_data(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SingleData obj = (SingleData)o;
			DataTable arg0 = (DataTable)ToLua.CheckObject(L, 2, typeof(DataTable));
			obj.data = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index data on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_SingleDataKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			SingleData obj = (SingleData)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.m_SingleDataKey = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_SingleDataKey on a nil value" : e.Message);
		}
	}
}

