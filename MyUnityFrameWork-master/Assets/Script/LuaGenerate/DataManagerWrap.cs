//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class DataManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(DataManager), typeof(System.Object));
		L.RegFunction("GetIsExistData", GetIsExistData);
		L.RegFunction("GetData", GetData);
		L.RegFunction("CleanCache", CleanCache);
		L.RegFunction("New", _CreateDataManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("c_directoryName", get_c_directoryName, null);
		L.RegVar("c_expandName", get_c_expandName, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateDataManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				DataManager obj = new DataManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: DataManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIsExistData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			bool o = DataManager.GetIsExistData(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			DataTable o = DataManager.GetData(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanCache(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			DataManager.CleanCache();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_c_directoryName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, DataManager.c_directoryName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_c_expandName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, DataManager.c_expandName);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

