//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class InputManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(InputManager), typeof(System.Object));
		L.RegFunction("Init", Init);
		L.RegFunction("LoadDispatcher", LoadDispatcher);
		L.RegFunction("GetDispatcher", GetDispatcher);
		L.RegFunction("RemoveDispatcher", RemoveDispatcher);
		L.RegFunction("Dispatch", Dispatch);
		L.RegFunction("AddAllEventListener", AddAllEventListener);
		L.RegFunction("AddListener", AddListener);
		L.RegFunction("RemoveAllEventListener", RemoveAllEventListener);
		L.RegFunction("RemoveListener", RemoveListener);
		L.RegFunction("New", _CreateInputManager);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("OnEveryEventDispatch", get_OnEveryEventDispatch, set_OnEveryEventDispatch);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateInputManager(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				InputManager obj = new InputManager();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: InputManager.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			InputManager.Init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int LoadDispatcher(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			IInputDispatcher o = InputManager.LoadDispatcher(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDispatcher(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			IInputDispatcher o = InputManager.GetDispatcher(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveDispatcher(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			InputManager.RemoveDispatcher(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispatch(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(IInputEventBase)))
			{
				IInputEventBase arg0 = (IInputEventBase)ToLua.ToObject(L, 1);
				InputManager.Dispatch(arg0);
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(string), typeof(IInputEventBase)))
			{
				string arg0 = ToLua.ToString(L, 1);
				IInputEventBase arg1 = (IInputEventBase)ToLua.ToObject(L, 2);
				InputManager.Dispatch(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: InputManager.Dispatch");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAllEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			InputEventCallBack arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventCallBack)ToLua.CheckObject(L, 2, typeof(InputEventCallBack));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventCallBack), func) as InputEventCallBack;
			}

			InputManager.AddAllEventListener(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			InputEventHandle<IInputEventBase> arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (InputEventHandle<IInputEventBase>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<IInputEventBase>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<IInputEventBase>), func) as InputEventHandle<IInputEventBase>;
			}

			InputManager.AddListener(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			string arg0 = ToLua.CheckString(L, 1);
			InputEventCallBack arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventCallBack)ToLua.CheckObject(L, 2, typeof(InputEventCallBack));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventCallBack), func) as InputEventCallBack;
			}

			InputManager.RemoveAllEventListener(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			string arg0 = ToLua.CheckString(L, 1);
			string arg1 = ToLua.CheckString(L, 2);
			InputEventHandle<IInputEventBase> arg2 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (InputEventHandle<IInputEventBase>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<IInputEventBase>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg2 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<IInputEventBase>), func) as InputEventHandle<IInputEventBase>;
			}

			InputManager.RemoveListener(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OnEveryEventDispatch(IntPtr L)
	{
		try
		{
			ToLua.Push(L, InputManager.OnEveryEventDispatch);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_OnEveryEventDispatch(IntPtr L)
	{
		try
		{
			InputEventCallBack arg0 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg0 = (InputEventCallBack)ToLua.CheckObject(L, 2, typeof(InputEventCallBack));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg0 = DelegateFactory.CreateDelegate(typeof(InputEventCallBack), func) as InputEventCallBack;
			}

			InputManager.OnEveryEventDispatch = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

