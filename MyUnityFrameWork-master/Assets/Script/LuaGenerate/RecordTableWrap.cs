//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class RecordTableWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(RecordTable), typeof(System.Collections.Generic.Dictionary<string,SingleField>));
		L.RegFunction("Analysis", Analysis);
		L.RegFunction("Serialize", Serialize);
		L.RegFunction("GetRecord", GetRecord);
		L.RegFunction("SetRecord", SetRecord);
		L.RegFunction("SetEnumRecord", SetEnumRecord);
		L.RegFunction("New", _CreateRecordTable);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateRecordTable(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				RecordTable obj = new RecordTable();
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: RecordTable.New");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Analysis(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			RecordTable o = RecordTable.Analysis(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Serialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			RecordTable arg0 = (RecordTable)ToLua.CheckObject(L, 1, typeof(RecordTable));
			string o = RecordTable.Serialize(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRecord(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				SingleField o = obj.GetRecord(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(UnityEngine.Vector2)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Vector2 arg1 = (UnityEngine.Vector2)ToLua.ToObject(L, 3);
				UnityEngine.Vector2 o = obj.GetRecord(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(UnityEngine.Vector3)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Vector3 arg1 = (UnityEngine.Vector3)ToLua.ToObject(L, 3);
				UnityEngine.Vector3 o = obj.GetRecord(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(UnityEngine.Color)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Color arg1 = (UnityEngine.Color)ToLua.ToObject(L, 3);
				UnityEngine.Color o = obj.GetRecord(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(string)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				string o = obj.GetRecord(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(bool)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				bool o = obj.GetRecord(arg0, arg1);
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(float)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				float o = obj.GetRecord(arg0, arg1);
				LuaDLL.lua_pushnumber(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: RecordTable.GetRecord");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRecord(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(UnityEngine.Vector2)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Vector2 arg1 = (UnityEngine.Vector2)ToLua.ToObject(L, 3);
				obj.SetRecord(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(UnityEngine.Vector3)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Vector3 arg1 = (UnityEngine.Vector3)ToLua.ToObject(L, 3);
				obj.SetRecord(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(UnityEngine.Color)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.Color arg1 = (UnityEngine.Color)ToLua.ToObject(L, 3);
				obj.SetRecord(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(string)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				obj.SetRecord(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(bool)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.SetRecord(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(RecordTable), typeof(string), typeof(float)))
			{
				RecordTable obj = (RecordTable)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.SetRecord(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: RecordTable.SetRecord");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEnumRecord(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			RecordTable obj = (RecordTable)ToLua.CheckObject(L, 1, typeof(RecordTable));
			string arg0 = ToLua.CheckString(L, 2);
			System.Enum arg1 = (System.Enum)ToLua.CheckObject(L, 3, typeof(System.Enum));
			obj.SetEnumRecord(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

