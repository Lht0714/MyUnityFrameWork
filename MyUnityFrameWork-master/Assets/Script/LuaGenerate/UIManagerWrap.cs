//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIManager), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("Init", Init);
		L.RegFunction("SetEventSystemEnable", SetEventSystemEnable);
		L.RegFunction("GetCameraNames", GetCameraNames);
		L.RegFunction("GetCamera", GetCamera);
		L.RegFunction("ChangeUICamera", ChangeUICamera);
		L.RegFunction("ResetUICamera", ResetUICamera);
		L.RegFunction("CreateUIWindow", CreateUIWindow);
		L.RegFunction("OpenUIWindow", OpenUIWindow);
		L.RegFunction("CloseUIWindow", CloseUIWindow);
		L.RegFunction("ShowUI", ShowUI);
		L.RegFunction("HideUI", HideUI);
		L.RegFunction("HideOtherUI", HideOtherUI);
		L.RegFunction("ShowOtherUI", ShowOtherUI);
		L.RegFunction("CloseAllUI", CloseAllUI);
		L.RegFunction("CloseLastUI", CloseLastUI);
		L.RegFunction("OpenUIAsync", OpenUIAsync);
		L.RegFunction("DestroyUI", DestroyUI);
		L.RegFunction("DestroyAllUI", DestroyAllUI);
		L.RegFunction("DestroyAllActiveUI", DestroyAllActiveUI);
		L.RegFunction("GetUI", GetUI);
		L.RegFunction("GetUIBaseByEventKey", GetUIBaseByEventKey);
		L.RegFunction("GetNormalUICount", GetNormalUICount);
		L.RegFunction("DestroyAllHideUI", DestroyAllHideUI);
		L.RegFunction("GetHideUI", GetHideUI);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("s_UIs", get_s_UIs, set_s_UIs);
		L.RegVar("s_hideUIs", get_s_hideUIs, set_s_hideUIs);
		L.RegVar("UILayerManager", get_UILayerManager, set_UILayerManager);
		L.RegVar("UIAnimManager", get_UIAnimManager, set_UIAnimManager);
		L.RegVar("UIStackManager", get_UIStackManager, set_UIStackManager);
		L.RegVar("EventSystem", get_EventSystem, set_EventSystem);
		L.RegVar("UIManagerGo", get_UIManagerGo, set_UIManagerGo);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UIManager.Init();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEventSystemEnable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UIManager.SetEventSystemEnable(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCameraNames(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			string[] o = UIManager.GetCameraNames();
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UnityEngine.Camera o = UIManager.GetCamera(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ChangeUICamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIWindowBase arg0 = (UIWindowBase)ToLua.CheckUnityObject(L, 1, typeof(UIWindowBase));
			string arg1 = ToLua.CheckString(L, 2);
			UIManager.ChangeUICamera(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetUICamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWindowBase arg0 = (UIWindowBase)ToLua.CheckUnityObject(L, 1, typeof(UIWindowBase));
			UIManager.ResetUICamera(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateUIWindow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UIWindowBase o = UIManager.CreateUIWindow(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenUIWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			UICallBack arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UICallBack)ToLua.CheckObject(L, 2, typeof(UICallBack));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(UICallBack), func) as UICallBack;
			}

			object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
			UIWindowBase o = UIManager.OpenUIWindow(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseUIWindow(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (TypeChecker.CheckTypes(L, 1, typeof(string), typeof(bool), typeof(UICallBack)) && TypeChecker.CheckParamsType(L, typeof(object), 4, count - 3))
			{
				string arg0 = ToLua.ToString(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				UICallBack arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (UICallBack)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(UICallBack), func) as UICallBack;
				}

				object[] arg3 = ToLua.ToParamsObject(L, 4, count - 3);
				UIManager.CloseUIWindow(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (TypeChecker.CheckTypes(L, 1, typeof(UIWindowBase), typeof(bool), typeof(UICallBack)) && TypeChecker.CheckParamsType(L, typeof(object), 4, count - 3))
			{
				UIWindowBase arg0 = (UIWindowBase)ToLua.ToObject(L, 1);
				bool arg1 = LuaDLL.lua_toboolean(L, 2);
				UICallBack arg2 = null;
				LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

				if (funcType3 != LuaTypes.LUA_TFUNCTION)
				{
					 arg2 = (UICallBack)ToLua.ToObject(L, 3);
				}
				else
				{
					LuaFunction func = ToLua.ToLuaFunction(L, 3);
					arg2 = DelegateFactory.CreateDelegate(typeof(UICallBack), func) as UICallBack;
				}

				object[] arg3 = ToLua.ToParamsObject(L, 4, count - 3);
				UIManager.CloseUIWindow(arg0, arg1, arg2, arg3);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.CloseUIWindow");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowUI(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UIWindowBase)))
			{
				UIWindowBase arg0 = (UIWindowBase)ToLua.ToObject(L, 1);
				UIWindowBase o = UIManager.ShowUI(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				UIWindowBase o = UIManager.ShowUI(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.ShowUI");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideUI(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UIWindowBase)))
			{
				UIWindowBase arg0 = (UIWindowBase)ToLua.ToObject(L, 1);
				UIWindowBase o = UIManager.HideUI(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(string)))
			{
				string arg0 = ToLua.ToString(L, 1);
				UIWindowBase o = UIManager.HideUI(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIManager.HideUI");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HideOtherUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UIManager.HideOtherUI(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ShowOtherUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UIManager.ShowOtherUI(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseAllUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UIManager.CloseAllUI(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CloseLastUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIType arg0 = (UIType)ToLua.CheckObject(L, 1, typeof(UIType));
			UIManager.CloseLastUI(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OpenUIAsync(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			string arg0 = ToLua.CheckString(L, 1);
			UICallBack arg1 = null;
			LuaTypes funcType2 = LuaDLL.lua_type(L, 2);

			if (funcType2 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (UICallBack)ToLua.CheckObject(L, 2, typeof(UICallBack));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 2);
				arg1 = DelegateFactory.CreateDelegate(typeof(UICallBack), func) as UICallBack;
			}

			object[] arg2 = ToLua.ToParamsObject(L, 3, count - 2);
			UIManager.OpenUIAsync(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIWindowBase arg0 = (UIWindowBase)ToLua.CheckUnityObject(L, 1, typeof(UIWindowBase));
			UIManager.DestroyUI(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyAllUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UIManager.DestroyAllUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyAllActiveUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UIManager.DestroyAllActiveUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UIWindowBase o = UIManager.GetUI(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIBaseByEventKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UIBase o = UIManager.GetUIBaseByEventKey(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNormalUICount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			int o = UIManager.GetNormalUICount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyAllHideUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UIManager.DestroyAllHideUI();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHideUI(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			UIWindowBase o = UIManager.GetHideUI(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_UIs(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UIManager.s_UIs);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_s_hideUIs(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, UIManager.s_hideUIs);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UILayerManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UIManager.UILayerManager);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIAnimManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UIManager.UIAnimManager);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIStackManager(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UIManager.UIStackManager);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_EventSystem(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UIManager.EventSystem);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIManagerGo(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UIManager.UIManagerGo);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_UIs(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UIWindowBase>> arg0 = (System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UIWindowBase>>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UIWindowBase>>));
			UIManager.s_UIs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_s_hideUIs(IntPtr L)
	{
		try
		{
			System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UIWindowBase>> arg0 = (System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UIWindowBase>>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.Dictionary<string,System.Collections.Generic.List<UIWindowBase>>));
			UIManager.s_hideUIs = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UILayerManager(IntPtr L)
	{
		try
		{
			UILayerManager arg0 = (UILayerManager)ToLua.CheckUnityObject(L, 2, typeof(UILayerManager));
			UIManager.UILayerManager = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIAnimManager(IntPtr L)
	{
		try
		{
			UIAnimManager arg0 = (UIAnimManager)ToLua.CheckUnityObject(L, 2, typeof(UIAnimManager));
			UIManager.UIAnimManager = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIStackManager(IntPtr L)
	{
		try
		{
			UIStackManager arg0 = (UIStackManager)ToLua.CheckUnityObject(L, 2, typeof(UIStackManager));
			UIManager.UIStackManager = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_EventSystem(IntPtr L)
	{
		try
		{
			UnityEngine.EventSystems.EventSystem arg0 = (UnityEngine.EventSystems.EventSystem)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.EventSystems.EventSystem));
			UIManager.EventSystem = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIManagerGo(IntPtr L)
	{
		try
		{
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			UIManager.UIManagerGo = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

