//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UIBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UIBase), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("OnInit", OnInit);
		L.RegFunction("Init", Init);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("HaveObject", HaveObject);
		L.RegFunction("GetHasGameObject", GetHasGameObject);
		L.RegFunction("GetGameObject", GetGameObject);
		L.RegFunction("GetRectTransform", GetRectTransform);
		L.RegFunction("GetUIBase", GetUIBase);
		L.RegFunction("GetSprite", GetSprite);
		L.RegFunction("GetImage", GetImage);
		L.RegFunction("GetTextMesh", GetTextMesh);
		L.RegFunction("GetText", GetText);
		L.RegFunction("GetToggle", GetToggle);
		L.RegFunction("GetButton", GetButton);
		L.RegFunction("GetInputField", GetInputField);
		L.RegFunction("GetScrollRect", GetScrollRect);
		L.RegFunction("GetRawImage", GetRawImage);
		L.RegFunction("GetSlider", GetSlider);
		L.RegFunction("GetCanvas", GetCanvas);
		L.RegFunction("GetPosition", GetPosition);
		L.RegFunction("SetSizeDelta", SetSizeDelta);
		L.RegFunction("GetReusingScrollRect", GetReusingScrollRect);
		L.RegFunction("GetJoyStick", GetJoyStick);
		L.RegFunction("GetJoyStick_ro", GetJoyStick_ro);
		L.RegFunction("GetLongPressComp", GetLongPressComp);
		L.RegFunction("GetDragComp", GetDragComp);
		L.RegFunction("RemoveAllListener", RemoveAllListener);
		L.RegFunction("AddOnClickListener", AddOnClickListener);
		L.RegFunction("AddOnClickListenerByCreate", AddOnClickListenerByCreate);
		L.RegFunction("AddLongPressListener", AddLongPressListener);
		L.RegFunction("AddBeginDragListener", AddBeginDragListener);
		L.RegFunction("AddEndDragListener", AddEndDragListener);
		L.RegFunction("AddOnDragListener", AddOnDragListener);
		L.RegFunction("AddEventListener", AddEventListener);
		L.RegFunction("GetClickRegisterInfo", GetClickRegisterInfo);
		L.RegFunction("RemoveOnClickListener", RemoveOnClickListener);
		L.RegFunction("RemoveLongPressListener", RemoveLongPressListener);
		L.RegFunction("GetLongPressRegisterInfo", GetLongPressRegisterInfo);
		L.RegFunction("CreateItem", CreateItem);
		L.RegFunction("DestroyItem", DestroyItem);
		L.RegFunction("CleanItem", CleanItem);
		L.RegFunction("GetItemByIndex", GetItemByIndex);
		L.RegFunction("GetItemByKey", GetItemByKey);
		L.RegFunction("GetItemIsExist", GetItemIsExist);
		L.RegFunction("SetText", SetText);
		L.RegFunction("SetImageColor", SetImageColor);
		L.RegFunction("SetImageFillAmount", SetImageFillAmount);
		L.RegFunction("SetTextColor", SetTextColor);
		L.RegFunction("SetImageAlpha", SetImageAlpha);
		L.RegFunction("SetInputText", SetInputText);
		L.RegFunction("SetTextByLangeage", SetTextByLangeage);
		L.RegFunction("SetTextByLanguagePath", SetTextByLanguagePath);
		L.RegFunction("SetSlider", SetSlider);
		L.RegFunction("SetActive", SetActive);
		L.RegFunction("SetEnabeled", SetEnabeled);
		L.RegFunction("SetButtonInteractable", SetButtonInteractable);
		L.RegFunction("SetRectWidth", SetRectWidth);
		L.RegFunction("SetWidth", SetWidth);
		L.RegFunction("SetPosition", SetPosition);
		L.RegFunction("SetAnchoredPosition", SetAnchoredPosition);
		L.RegFunction("SetScale", SetScale);
		L.RegFunction("SetMeshText", SetMeshText);
		L.RegFunction("SetImageSprite", SetImageSprite);
		L.RegFunction("SetRawImageByModelShowCamera", SetRawImageByModelShowCamera);
		L.RegFunction("CleanModelShowCameraList", CleanModelShowCameraList);
		L.RegFunction("CreateModelShow", CreateModelShow);
		L.RegFunction("RemoveModelShowCamera", RemoveModelShowCamera);
		L.RegFunction("AddLifeCycleComponent", AddLifeCycleComponent);
		L.RegFunction("GetHeightLightObjects", GetHeightLightObjects);
		L.RegFunction("SetGuideMode", SetGuideMode);
		L.RegFunction("GetGuideFixGameObject", GetGuideFixGameObject);
		L.RegFunction("GetGuideDynamicCreateItem", GetGuideDynamicCreateItem);
		L.RegFunction("SetItemGuideMode", SetItemGuideMode);
		L.RegFunction("SetItemGuideModeByIndex", SetItemGuideModeByIndex);
		L.RegFunction("SetSelfGuideMode", SetSelfGuideMode);
		L.RegFunction("CancelGuideModel", CancelGuideModel);
		L.RegFunction("ClearGuideModel", ClearGuideModel);
		L.RegFunction("AddAnimData", AddAnimData);
		L.RegFunction("CleanAnim", CleanAnim);
		L.RegFunction("ClearObject", ClearObject);
		L.RegFunction("WorldPosToUIPos", WorldPosToUIPos);
		L.RegFunction("UIPosToWorldPos", UIPosToWorldPos);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("m_canvas", get_m_canvas, set_m_canvas);
		L.RegVar("m_objectList", get_m_objectList, set_m_objectList);
		L.RegVar("UIID", get_UIID, null);
		L.RegVar("UIEventKey", get_UIEventKey, null);
		L.RegVar("UIName", get_UIName, set_UIName);
		L.RegVar("RectTransform", get_RectTransform, set_RectTransform);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OnInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			obj.OnInit();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.Init(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			obj.Dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HaveObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.HaveObject(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHasGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.GetHasGameObject(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.GetGameObject(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRectTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.RectTransform o = obj.GetRectTransform(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUIBase(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UIBase o = obj.GetUIBase(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Sprite o = obj.GetSprite(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.UI.Image o = obj.GetImage(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextMesh(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.TextMesh o = obj.GetTextMesh(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.UI.Text o = obj.GetText(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetToggle(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.UI.Toggle o = obj.GetToggle(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetButton(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.UI.Button o = obj.GetButton(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInputField(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.UI.InputField o = obj.GetInputField(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetScrollRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.UI.ScrollRect o = obj.GetScrollRect(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRawImage(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.UI.RawImage o = obj.GetRawImage(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSlider(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.UI.Slider o = obj.GetSlider(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCanvas(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Canvas o = obj.GetCanvas(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			UnityEngine.Vector3 o = obj.GetPosition(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSizeDelta(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetSizeDelta(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetReusingScrollRect(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			ReusingScrollRect o = obj.GetReusingScrollRect(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetJoyStick(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UGUIJoyStick o = obj.GetJoyStick(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetJoyStick_ro(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UGUIJoyStickBase o = obj.GetJoyStick_ro(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLongPressComp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			LongPressAcceptor o = obj.GetLongPressComp(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetDragComp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			DragAcceptor o = obj.GetDragComp(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveAllListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			obj.RemoveAllListener();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			InputEventHandle<InputUIOnClickEvent> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventHandle<InputUIOnClickEvent>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<InputUIOnClickEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUIOnClickEvent>), func) as InputEventHandle<InputUIOnClickEvent>;
			}

			string arg2 = ToLua.CheckString(L, 4);
			obj.AddOnClickListener(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnClickListenerByCreate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			UnityEngine.UI.Button arg0 = (UnityEngine.UI.Button)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.UI.Button));
			string arg1 = ToLua.CheckString(L, 3);
			InputEventHandle<InputUIOnClickEvent> arg2 = null;
			LuaTypes funcType4 = LuaDLL.lua_type(L, 4);

			if (funcType4 != LuaTypes.LUA_TFUNCTION)
			{
				 arg2 = (InputEventHandle<InputUIOnClickEvent>)ToLua.CheckObject(L, 4, typeof(InputEventHandle<InputUIOnClickEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 4);
				arg2 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUIOnClickEvent>), func) as InputEventHandle<InputUIOnClickEvent>;
			}

			string arg3 = ToLua.CheckString(L, 5);
			obj.AddOnClickListenerByCreate(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLongPressListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			InputEventHandle<InputUILongPressEvent> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventHandle<InputUILongPressEvent>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<InputUILongPressEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUILongPressEvent>), func) as InputEventHandle<InputUILongPressEvent>;
			}

			string arg2 = ToLua.CheckString(L, 4);
			obj.AddLongPressListener(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddBeginDragListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			InputEventHandle<InputUIOnBeginDragEvent> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventHandle<InputUIOnBeginDragEvent>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<InputUIOnBeginDragEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUIOnBeginDragEvent>), func) as InputEventHandle<InputUIOnBeginDragEvent>;
			}

			string arg2 = ToLua.CheckString(L, 4);
			obj.AddBeginDragListener(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEndDragListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			InputEventHandle<InputUIOnEndDragEvent> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventHandle<InputUIOnEndDragEvent>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<InputUIOnEndDragEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUIOnEndDragEvent>), func) as InputEventHandle<InputUIOnEndDragEvent>;
			}

			string arg2 = ToLua.CheckString(L, 4);
			obj.AddEndDragListener(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddOnDragListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			InputEventHandle<InputUIOnDragEvent> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventHandle<InputUIOnDragEvent>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<InputUIOnDragEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUIOnDragEvent>), func) as InputEventHandle<InputUIOnDragEvent>;
			}

			string arg2 = ToLua.CheckString(L, 4);
			obj.AddOnDragListener(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddEventListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			System.Enum arg0 = (System.Enum)ToLua.CheckObject(L, 2, typeof(System.Enum));
			EventHandle arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (EventHandle)ToLua.CheckObject(L, 3, typeof(EventHandle));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(EventHandle), func) as EventHandle;
			}

			obj.AddEventListener(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetClickRegisterInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			InputEventHandle<InputUIOnClickEvent> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventHandle<InputUIOnClickEvent>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<InputUIOnClickEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUIOnClickEvent>), func) as InputEventHandle<InputUIOnClickEvent>;
			}

			string arg2 = ToLua.CheckString(L, 4);
			InputButtonClickRegisterInfo o = obj.GetClickRegisterInfo(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveOnClickListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			InputEventHandle<InputUIOnClickEvent> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventHandle<InputUIOnClickEvent>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<InputUIOnClickEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUIOnClickEvent>), func) as InputEventHandle<InputUIOnClickEvent>;
			}

			string arg2 = ToLua.CheckString(L, 4);
			obj.RemoveOnClickListener(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveLongPressListener(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			InputEventHandle<InputUILongPressEvent> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventHandle<InputUILongPressEvent>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<InputUILongPressEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUILongPressEvent>), func) as InputEventHandle<InputUILongPressEvent>;
			}

			string arg2 = ToLua.CheckString(L, 4);
			obj.RemoveLongPressListener(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLongPressRegisterInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			InputEventHandle<InputUILongPressEvent> arg1 = null;
			LuaTypes funcType3 = LuaDLL.lua_type(L, 3);

			if (funcType3 != LuaTypes.LUA_TFUNCTION)
			{
				 arg1 = (InputEventHandle<InputUILongPressEvent>)ToLua.CheckObject(L, 3, typeof(InputEventHandle<InputUILongPressEvent>));
			}
			else
			{
				LuaFunction func = ToLua.ToLuaFunction(L, 3);
				arg1 = DelegateFactory.CreateDelegate(typeof(InputEventHandle<InputUILongPressEvent>), func) as InputEventHandle<InputUILongPressEvent>;
			}

			string arg2 = ToLua.CheckString(L, 4);
			InputEventRegisterInfo<InputUILongPressEvent> o = obj.GetLongPressRegisterInfo(arg0, arg1, arg2);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateItem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(string), typeof(string)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				UIBase o = obj.CreateItem(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(UnityEngine.GameObject), typeof(UnityEngine.GameObject), typeof(bool)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.ToObject(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				UIBase o = obj.CreateItem(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(string), typeof(UnityEngine.GameObject), typeof(bool)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				UnityEngine.GameObject arg1 = (UnityEngine.GameObject)ToLua.ToObject(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				UIBase o = obj.CreateItem(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(string), typeof(string), typeof(bool)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string arg1 = ToLua.ToString(L, 3);
				bool arg2 = LuaDLL.lua_toboolean(L, 4);
				UIBase o = obj.CreateItem(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIBase.CreateItem");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DestroyItem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(UIBase)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				UIBase arg0 = (UIBase)ToLua.ToObject(L, 2);
				obj.DestroyItem(arg0);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(UIBase), typeof(float)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				UIBase arg0 = (UIBase)ToLua.ToObject(L, 2);
				float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
				obj.DestroyItem(arg0, arg1);
				return 0;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(UIBase), typeof(bool)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				UIBase arg0 = (UIBase)ToLua.ToObject(L, 2);
				bool arg1 = LuaDLL.lua_toboolean(L, 3);
				obj.DestroyItem(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIBase.DestroyItem");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanItem(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes(L, 1, typeof(UIBase)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				obj.CleanItem();
				return 0;
			}
			else if (count == 2 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(bool)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				bool arg0 = LuaDLL.lua_toboolean(L, 2);
				obj.CleanItem(arg0);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIBase.CleanItem");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemByIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			UIBase o = obj.GetItemByIndex(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemByKey(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UIBase o = obj.GetItemByKey(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetItemIsExist(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			bool o = obj.GetItemIsExist(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetText(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImageColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Color arg1 = (UnityEngine.Color)ToLua.CheckObject(L, 3, typeof(UnityEngine.Color));
			obj.SetImageColor(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImageFillAmount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetImageFillAmount(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.Color arg1 = (UnityEngine.Color)ToLua.CheckObject(L, 3, typeof(UnityEngine.Color));
			obj.SetTextColor(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImageAlpha(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetImageAlpha(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInputText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetInputText(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextByLangeage(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			object[] arg3 = ToLua.ToParamsObject(L, 5, count - 4);
			obj.SetTextByLangeage(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextByLanguagePath(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
			obj.SetTextByLanguagePath(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSlider(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetSlider(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetActive(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetActive(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEnabeled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetEnabeled(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetButtonInteractable(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetButtonInteractable(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRectWidth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.SetRectWidth(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetWidth(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.SetWidth(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			bool arg4 = LuaDLL.luaL_checkboolean(L, 6);
			obj.SetPosition(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetAnchoredPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.SetAnchoredPosition(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetScale(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			float arg3 = (float)LuaDLL.luaL_checknumber(L, 5);
			obj.SetScale(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMeshText(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetMeshText(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetImageSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			UnityEngine.UI.Image arg0 = (UnityEngine.UI.Image)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.UI.Image));
			string arg1 = ToLua.CheckString(L, 3);
			bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
			obj.SetImageSprite(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetRawImageByModelShowCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 13);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			string arg2 = ToLua.CheckString(L, 4);
			System.Nullable<bool> arg3 = (System.Nullable<bool>)ToLua.CheckVarObject(L, 5, typeof(System.Nullable<bool>));
			System.Nullable<float> arg4 = (System.Nullable<float>)ToLua.CheckVarObject(L, 6, typeof(System.Nullable<float>));
			System.Nullable<UnityEngine.Color> arg5 = (System.Nullable<UnityEngine.Color>)ToLua.CheckVarObject(L, 7, typeof(System.Nullable<UnityEngine.Color>));
			System.Nullable<UnityEngine.Vector3> arg6 = (System.Nullable<UnityEngine.Vector3>)ToLua.CheckVarObject(L, 8, typeof(System.Nullable<UnityEngine.Vector3>));
			System.Nullable<UnityEngine.Vector3> arg7 = (System.Nullable<UnityEngine.Vector3>)ToLua.CheckVarObject(L, 9, typeof(System.Nullable<UnityEngine.Vector3>));
			System.Nullable<UnityEngine.Vector3> arg8 = (System.Nullable<UnityEngine.Vector3>)ToLua.CheckVarObject(L, 10, typeof(System.Nullable<UnityEngine.Vector3>));
			System.Nullable<UnityEngine.Vector3> arg9 = (System.Nullable<UnityEngine.Vector3>)ToLua.CheckVarObject(L, 11, typeof(System.Nullable<UnityEngine.Vector3>));
			System.Nullable<float> arg10 = (System.Nullable<float>)ToLua.CheckVarObject(L, 12, typeof(System.Nullable<float>));
			System.Nullable<float> arg11 = (System.Nullable<float>)ToLua.CheckVarObject(L, 13, typeof(System.Nullable<float>));
			UIModelShowTool.UIModelShowData o = obj.SetRawImageByModelShowCamera(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanModelShowCameraList(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			obj.CleanModelShowCameraList();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateModelShow(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 12);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			System.Nullable<bool> arg2 = (System.Nullable<bool>)ToLua.CheckVarObject(L, 4, typeof(System.Nullable<bool>));
			System.Nullable<float> arg3 = (System.Nullable<float>)ToLua.CheckVarObject(L, 5, typeof(System.Nullable<float>));
			System.Nullable<UnityEngine.Color> arg4 = (System.Nullable<UnityEngine.Color>)ToLua.CheckVarObject(L, 6, typeof(System.Nullable<UnityEngine.Color>));
			System.Nullable<UnityEngine.Vector3> arg5 = (System.Nullable<UnityEngine.Vector3>)ToLua.CheckVarObject(L, 7, typeof(System.Nullable<UnityEngine.Vector3>));
			System.Nullable<UnityEngine.Vector3> arg6 = (System.Nullable<UnityEngine.Vector3>)ToLua.CheckVarObject(L, 8, typeof(System.Nullable<UnityEngine.Vector3>));
			System.Nullable<UnityEngine.Vector3> arg7 = (System.Nullable<UnityEngine.Vector3>)ToLua.CheckVarObject(L, 9, typeof(System.Nullable<UnityEngine.Vector3>));
			System.Nullable<UnityEngine.Vector3> arg8 = (System.Nullable<UnityEngine.Vector3>)ToLua.CheckVarObject(L, 10, typeof(System.Nullable<UnityEngine.Vector3>));
			System.Nullable<float> arg9 = (System.Nullable<float>)ToLua.CheckVarObject(L, 11, typeof(System.Nullable<float>));
			System.Nullable<float> arg10 = (System.Nullable<float>)ToLua.CheckVarObject(L, 12, typeof(System.Nullable<float>));
			UIModelShowTool.UIModelShowData o = obj.CreateModelShow(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveModelShowCamera(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			UIModelShowTool.UIModelShowData arg0 = (UIModelShowTool.UIModelShowData)ToLua.CheckObject(L, 2, typeof(UIModelShowTool.UIModelShowData));
			obj.RemoveModelShowCamera(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddLifeCycleComponent(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			UILifeCycleInterface arg0 = (UILifeCycleInterface)ToLua.CheckObject(L, 2, typeof(UILifeCycleInterface));
			obj.AddLifeCycleComponent(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHeightLightObjects(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			System.Collections.Generic.List<UnityEngine.GameObject> o = obj.GetHeightLightObjects();
			ToLua.PushObject(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetGuideMode(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(UnityEngine.GameObject), typeof(int)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.ToObject(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				GuideHeightLightComponent o = obj.SetGuideMode(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes(L, 1, typeof(UIBase), typeof(string), typeof(int)))
			{
				UIBase obj = (UIBase)ToLua.ToObject(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
				obj.SetGuideMode(arg0, arg1);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UIBase.SetGuideMode");
			}
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuideFixGameObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.GetGuideFixGameObject(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetGuideDynamicCreateItem(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			UnityEngine.GameObject o = obj.GetGuideDynamicCreateItem(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetItemGuideMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			obj.SetItemGuideMode(arg0, arg1);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetItemGuideModeByIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			string arg0 = ToLua.CheckString(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			obj.SetItemGuideModeByIndex(arg0, arg1, arg2);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetSelfGuideMode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.SetSelfGuideMode(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CancelGuideModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			UnityEngine.GameObject arg0 = (UnityEngine.GameObject)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.GameObject));
			obj.CancelGuideModel(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearGuideModel(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			obj.ClearGuideModel();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddAnimData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			AnimData arg0 = (AnimData)ToLua.CheckObject(L, 2, typeof(AnimData));
			obj.AddAnimData(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CleanAnim(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			obj.CleanAnim();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			obj.ClearObject();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WorldPosToUIPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)ToLua.CheckObject(L, 2, typeof(UnityEngine.Vector3));
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.Vector3 o = obj.WorldPosToUIPos(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UIPosToWorldPos(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UIBase obj = (UIBase)ToLua.CheckObject(L, 1, typeof(UIBase));
			UnityEngine.Vector3 arg0 = (UnityEngine.Vector3)ToLua.CheckObject(L, 2, typeof(UnityEngine.Vector3));
			string arg1 = ToLua.CheckString(L, 3);
			UnityEngine.Vector3 o = obj.UIPosToWorldPos(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_canvas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			UnityEngine.Canvas ret = obj.m_canvas;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_canvas on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_m_objectList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			System.Collections.Generic.List<UnityEngine.GameObject> ret = obj.m_objectList;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_objectList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIID(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			int ret = obj.UIID;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIID on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIEventKey(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			string ret = obj.UIEventKey;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIEventKey on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_UIName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			string ret = obj.UIName;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_RectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			UnityEngine.RectTransform ret = obj.RectTransform;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RectTransform on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_canvas(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			UnityEngine.Canvas arg0 = (UnityEngine.Canvas)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.Canvas));
			obj.m_canvas = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_canvas on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_m_objectList(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			System.Collections.Generic.List<UnityEngine.GameObject> arg0 = (System.Collections.Generic.List<UnityEngine.GameObject>)ToLua.CheckObject(L, 2, typeof(System.Collections.Generic.List<UnityEngine.GameObject>));
			obj.m_objectList = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index m_objectList on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_UIName(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			string arg0 = ToLua.CheckString(L, 2);
			obj.UIName = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index UIName on a nil value" : e.Message);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_RectTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UIBase obj = (UIBase)o;
			UnityEngine.RectTransform arg0 = (UnityEngine.RectTransform)ToLua.CheckUnityObject(L, 2, typeof(UnityEngine.RectTransform));
			obj.RectTransform = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o == null ? "attempt to index RectTransform on a nil value" : e.Message);
		}
	}
}

